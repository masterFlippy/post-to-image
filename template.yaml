AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  OpenAIApiKey:
    Type: String
    Description: "OpenAI API Key"

Resources:
  PostToImageEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: PostToImageEventBus

  PostToImageApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        "Fn::Transform":
          Name: "AWS::Include"
          Parameters:
            Location: "./api.yaml"

  HttpApiEvenbridgeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ApiDirectWriteEventBridge
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
                - events:PutEvents
              Effect: Allow
              Resource:
                - !GetAtt PostToImageEventBus.Arn

  HttpApiLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: !GetAtt GetImageFunction.Arn

  ImageUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-image-upload-bucket"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - POST
              - DELETE
              - HEAD
              - GET
            AllowedOrigins:
              - "*"
            ExposedHeaders: []

  ImageUploadBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageUploadBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-image-upload-bucket/*"

  PromptPreparationAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bootstrap
      Runtime: provided.al2023
      CodeUri: prepare-prompt/
      Timeout: 60
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - comprehend:DetectSentiment
                - comprehend:DetectKeyPhrases
              Resource: "*"

  DalleImageGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bootstrap
      Runtime: provided.al2023
      CodeUri: generate-image-dalle/
      Timeout: 30
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
      Policies:
        - AWSLambdaBasicExecutionRole

  BedrockImageGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bootstrap
      Runtime: provided.al2023
      CodeUri: generate-image-bedrock/
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: !Ref ImageUploadBucket
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "bedrock:InvokeModel"
              Resource: "*"

  GetImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bootstrap
      Runtime: provided.al2023
      CodeUri: get-image/
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: !Ref ImageUploadBucket
      Policies:
        - AWSLambdaBasicExecutionRole

  ImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bootstrap
      Runtime: provided.al2023
      CodeUri: upload-image/
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: !Ref ImageUploadBucket
          REGION: !Ref AWS::Region
      Policies:
        - AWSLambdaBasicExecutionRole

  PostToImageStateMachine:
    Type: "AWS::Serverless::StateMachine"
    Properties:
      Definition:
        StartAt: PromptPreparation
        States:
          PromptPreparation:
            Type: Task
            Resource: !GetAtt PromptPreparationAPIFunction.Arn
            Next: CheckBedRock
          CheckBedRock:
            Type: Choice
            Choices:
              - Variable: "$.bedrock"
                BooleanEquals: true
                Next: BedrockImageGeneration
            Default: DalleImageGeneration
          BedrockImageGeneration:
            Type: Task
            Resource: !GetAtt BedrockImageGenerationFunction.Arn
            End: true
          DalleImageGeneration:
            Type: Task
            Resource: !GetAtt DalleImageGenerationFunction.Arn
            Next: ImageUpload
          ImageUpload:
            Type: Task
            Resource: !GetAtt ImageUploadFunction.Arn
            End: true
      Role: !GetAtt PostToImageStateMachineRole.Arn

  PostToImageStateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "StateMachineExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt PromptPreparationAPIFunction.Arn
                  - !GetAtt DalleImageGenerationFunction.Arn
                  - !GetAtt ImageUploadFunction.Arn
                  - !GetAtt BedrockImageGenerationFunction.Arn
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                  - "states:DescribeExecution"
                  - "states:StopExecution"
                Resource: "*"

  StateMachineEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref PostToImageEventBus
      EventPattern:
        source:
          - "api-gateway"
        detail-type:
          - "PreparePrompt"
      Targets:
        - Arn: !GetAtt PostToImageStateMachine.Arn
          Id: "PostToImageStateMachineTarget"
          RoleArn: !GetAtt EventBridgeExecutionRole.Arn
      State: "ENABLED"

  EventBridgeExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "EventBridgeStepFunctionsExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource: !GetAtt PostToImageStateMachine.Arn

Outputs:
  ImageUploadBucketName:
    Description: "Name of the S3 bucket"
    Value: !Ref ImageUploadBucket
